name: "Terraform Plan"
description: "Run terraform plan with support for S3 backend and artifact upload."

inputs:
  terraform-dir:
    description: "Relative path to the directory containing Terraform configuration files (e.g., 'tf', 'infrastructure')."
    required: false
    type: string
    default: "tf"

  release-tag:
    description: "Git release tag to check out. If omitted, the latest commit on the default branch is used."
    required: false
    type: string
    default: ""

  ci-pipeline:
    description: "Set to 'true' to include the commit SHA in the Terraform state key (suitable for CI/CD). Use 'false' for static state keys."
    required: false
    type: string
    default: "false"

  s3-bucket:
    description: "Name of the S3 bucket used as the backend for storing the Terraform state file."
    required: true
    type: string

  s3-region:
    description: "AWS region where the S3 backend bucket is located (e.g., us-east-1, eu-west-1)."
    required: true
    type: string

  tf-plan-name:
    description: "Name of the Terraform plan file"
    required: false
    default: "terraform-plan"

  tf-plan-file:
    description: "File to save the Terraform plan output"
    required: false
    default: "tfplan"  

  tf-vars-file:
    description: "Optional Terraform variable file"
    required: false
    default: "terraform.tfvars"

outputs:
  plan-status:
    description: "Result of terraform plan"
    value: ${{ steps.tf-plan.outcome }}

runs:
  using: "composite"
  steps:
    - name: Set Checkout Ref
      id: set-ref
      shell: bash
      run: |
        if [[ -n "${{ inputs.release-tag }}" ]]; then
          echo "ref=${{ inputs.release-tag }}" >> $GITHUB_OUTPUT
        else
          echo "ref=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
        fi

    - name: Checkout Repo
      id: checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.set-ref.outputs.ref }}

    - name: Setup Terraform
      id: setup-terraform
      uses: hashicorp/setup-terraform@v3

    - name: Generate Terraform State Key
      id: generate-tfstate-key
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        if [[ "${{ inputs.ci-pipeline }}" == "true" ]]; then
          state_key="${{ github.repository }}/${{ github.sha }}/terraform.tfstate"
        else
          state_key="${{ github.repository }}/terraform.tfstate"
        fi
        echo "s3_key=$state_key" >> $GITHUB_OUTPUT

    - name: Initialize Terraform with S3 Backend
      id: terraform-init-s3
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        terraform init -input=false \
          -backend-config="bucket=${{ inputs.s3-bucket }}" \
          -backend-config="key=${{ steps.generate-tfstate-key.outputs.s3_key }}" \
          -backend-config="region=${{ inputs.s3-region }}" \
          -backend-config="encrypt=true" \
          -backend-config="use_lockfile=true"

    - name: Terraform Plan and Save Output
      id: tf-plan
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        echo "### Terraform Plan" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        terraform plan -input=false -out=${{ inputs.tf-plan-file }}.out -var-file=${{ inputs.tf-vars-file }}
        terraform show -no-color ${{ inputs.tf-plan-file }}.out > ${{ inputs.tf-plan-file }}.txt
        echo "\`\`\`hcl" >> $GITHUB_STEP_SUMMARY
        cat ${{ inputs.tf-plan-file }}.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Upload Plan Output as Artifact
      id: upload-plan-artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.tf-plan-name }}
        path: |
          ${{ github.workspace }}/${{ inputs.terraform-dir }}/${{ inputs.tf-plan-file }}.out
